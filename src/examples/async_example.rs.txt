//! A simple example of hooking up stdin/stdout to a WebSocket stream.
//!
//! This example will connect to a server specified in the argument list and
//! then forward all data read on stdin to the server, printing out all data
//! received on stdout.
//!
//! Note that this is not currently optimized for performance, especially around
//! buffer management. Rather it's intended to show an example of working with a
//! client.
//!
//! You can use this example together with the `server` example.
/*
    Required dependencies
    tokio-tungstenite = { version = "0.17.2", features = ["native-tls"] }
    tokio = { version = "1.22.0", features = ["full"] }
    futures-util = "0.3.25"
    futures-channel = "0.3.25"
    url = "2.3.1"
*/
use std::env;

use futures_util::{future, pin_mut, StreamExt};
use tokio::io::{AsyncReadExt, AsyncWriteExt};
use tokio_tungstenite::{connect_async, tungstenite::protocol::Message};

#[tokio::main]
async fn main() {
    //Reads the args passed when running the program
    let connect_addr =
        env::args().nth(1).unwrap_or_else(|| panic!("this program requires at least one argument"));

    //Parse the url and allow it to raise an exception if the user doesnt pass a good url
    let url = url::Url::parse(&connect_addr).unwrap();

    //Create an channel that we will use to send the stdin from one async channel to another. This allows us to have one async task focused on reading stdin while this one reads the ws.
    let (stdin_tx, stdin_rx) = futures_channel::mpsc::unbounded();
    //Start the async task that will read from stdin. We pass the send/rec channel that we want the users input to be received through.
    tokio::spawn(read_stdin(stdin_tx));

    //Connect to the websocket at the specified url
    let (ws_stream, _) = connect_async(url).await.expect("Failed to connect");
    println!("WebSocket handshake has been successfully completed");

    let (write, read) = ws_stream.split();

    //Connect the users input to the websocket. This will send everything the user inputs, to the server at the other end of the websocket
    let stdin_to_ws = stdin_rx.map(Ok).forward(write);
    //Create the future which will read the
    let ws_to_stdout = {
        read.for_each(|message| async {
            let data = message.unwrap().into_data();
            tokio::io::stdout().write_all(&data).await.unwrap();
        })
    };
    //Because {stdin_to_ws} and {ws_to_stdout} are going to be used within the sync function future::select we pin them(idk what the consequences for not pinning them are. But my understanding is that data from outside an async function tahts used within one should be pinned to avoid *something*)
    pin_mut!(stdin_to_ws, ws_to_stdout);
    //Await for both futures to complete
    future::select(stdin_to_ws, ws_to_stdout).await;
}

// Our helper method which will read data from stdin and send it along the
// sender provided.
async fn read_stdin(tx: futures_channel::mpsc::UnboundedSender<Message>) {
    let mut stdin = tokio::io::stdin();
    loop {
        let mut buf = vec![0; 1024];
        let n = match stdin.read(&mut buf).await {
            Err(_) | Ok(0) => break,
            Ok(n) => n,
        };
        buf.truncate(n);
        tx.unbounded_send(Message::binary(buf)).unwrap();
    }
}